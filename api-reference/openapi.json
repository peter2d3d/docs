{
  "openapi": "3.0.1",
  "info": {
    "title": "OpenAPI Plant Store",
    "description": "A sample API that uses a plant store as an example to demonstrate features in the OpenAPI specification",
    "license": {
      "name": "MIT"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://sandbox.mintlify.com"
    }
  ],
  "security": [
    {
      "bearerAuth": [],
      "APIKeyHeader": []
    }
  ],
  "paths": {
    "/plants": {
      "get": {
        "description": "Returns all plants from the system that the user has access to",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of results to return",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Plant response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Plant"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "Creates a new plant in the store",
        "requestBody": {
          "description": "Plant to add to the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewPlant"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "plant response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Plant"
                }
              }
            }
          },
          "400": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/plants/{id}": {
      "delete": {
        "description": "Deletes a single plant based on the ID supplied",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of plant to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Plant deleted",
            "content": {}
          },
          "400": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/run-ffmpeg-command": {
      "post": {
        "tags": [
          "FFmpeg Commands"
        ],
        "summary": "Run FFmpeg Command",
        "description": "Submit an FFmpeg command for processing with input and output file specifications.",
        "operationId": "run_ffmpeg_command_run_ffmpeg_command_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FFmpegCommandRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully submitted FFmpeg command",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommandResponse"
                },
                "example": {
                  "command_id": "123e4567-e89b-12d3-a456-426614174000"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API key",
            "content": {
              "application/json": {
                "example": {
                  "detail": "Invalid authorization key"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/poll-command/{command_id}": {
      "get": {
        "tags": [
          "FFmpeg Commands"
        ],
        "summary": "Check Command Status",
        "description": "Check the status of a previously submitted FFmpeg command.\n    \n    Returns:\n    - Current processing status\n    - Output file information (when available)\n    - Error details (if failed)",
        "operationId": "poll_command_poll_command__command_id__get",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "command_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Command Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved command status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommandStatusResponse"
                },
                "example": {
                  "output_files": {
                    "output1": "output.mp4"
                  },
                  "status": "PROCESSING"
                }
              }
            }
          },
          "401": {
            "description": "Invalid API key",
            "content": {
              "application/json": {
                "example": {
                  "detail": "Invalid authorization key"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
		"Plant": {
			"required": [
			  "name"
			],
			"type": "object",
			"properties": {
			  "name": {
				"description": "The name of the plant",
				"type": "string"
			  },
			  "tag": {
				"description": "Tag to specify the type",
				"type": "string"
			  }
			}
		  },
		"NewPlant": {
			"allOf": [
			  {
				"$ref": "#/components/schemas/Plant"
			  },
			  {
				"required": [
				  "id"
				],
				"type": "object",
				"properties": {
				  "id": {
					"description": "Identification number of the plant",
					"type": "integer",
					"format": "int64"
				  }
				}
			  }
			]
		},
		"Error": {
			"required": [
			  "error",
			  "message"
			],
			"type": "object",
			"properties": {
			  "error": {
				"type": "integer",
				"format": "int32"
			  },
			  "message": {
				"type": "string"
			  }
			}
		},
      "CommandResponse": {
        "properties": {
          "command_id": {
            "type": "string",
            "format": "uuid",
            "title": "Command Id",
            "description": "Unique identifier for the submitted FFmpeg command",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "type": "object",
        "required": [
          "command_id"
        ],
        "title": "CommandResponse"
      },
      "CommandStatusResponse": {
        "properties": {
          "error_details": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error Details",
            "description": "Error details if the command failed",
            "example": "Command failed to complete"
          },
          "output_files": {
            "anyOf": [
              {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Output Files",
            "description": "Dictionary mapping file aliases to their output file paths",
            "example": {
              "output1": "output.mp4"
            }
          },
          "status": {
            "type": "string",
            "enum": [
              "PENDING",
              "PROCESSING",
              "FAILED",
              "SUCCESS",
              "TIME_OUT"
            ],
            "title": "Status",
            "description": "Current status of the FFmpeg command:\n        - PENDING: Command is queued\n        - PROCESSING: Command is currently running\n        - FAILED: Command failed to complete\n        - SUCCESS: Command completed successfully\n        - TIME_OUT: Command exceeded maximum execution time",
            "example": "PROCESSING"
          }
        },
        "type": "object",
        "required": [
          "status"
        ],
        "title": "CommandStatusResponse",
        "example": {
          "output_files": {
            "output1": "output.mp4"
          },
          "status": "SUCCESS"
        }
      },
      "FFmpegCommandRequest": {
        "properties": {
          "input_files": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Input Files",
            "description": "Dictionary mapping file aliases to their storage paths",
            "example": {
              "input1": "s3://public-bucket/videos/first-video.mp4"
            }
          },
          "output_files": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Output Files",
            "description": "Dictionary mapping file aliases to their desired output file names",
            "example": {
              "output1": "output.mp4"
            }
          },
          "ffmpeg_command": {
            "type": "string",
            "title": "Ffmpeg Command",
            "description": "FFmpeg command string using {{alias}} placeholders for input and output files",
            "example": "-i {{input1}} -vf scale=1280:720 {{output1}}"
          }
        },
        "type": "object",
        "required": [
          "input_files",
          "output_files",
          "ffmpeg_command"
        ],
        "title": "FFmpegCommandRequest",
        "example": {
          "ffmpeg_command": "-i {{input1}} -i {{input2}} -filter_complex '[0:v][1:v]hstack=inputs=2[v]' -map '[v]' {{output1}}",
          "input_files": {
            "input1": "s3://public-bucket/videos/first-video.mp4",
            "input2": "s3://public-bucket/videos/second-video.mp4"
          },
          "output_files": {
            "output1": "output.mp4"
          }
        }
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      },
        "APIKeyHeader": {
          "type": "apiKey",
          "in": "header",
          "name": "X-API-KEY"
        }
    }
  }
}